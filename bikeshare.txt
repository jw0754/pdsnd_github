import time
import pandas as pd
import numpy as np

CITY_DATA = {
    'chicago': 'chicago.csv',
    'new york city': 'new_york_city.csv',
    'washington': 'washington.csv'
}

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print("Hello! Let's explore some US bikeshare data!")
    
    # Get user input for city (chicago, new york city, washington).
    cities = ['chicago', 'new york city', 'washington']
    while True:
        city = input("Please enter the city to analyze (Chicago, New York City, Washington): ").strip().lower()
        if city in cities:
            break
        print("Invalid input. Please enter a valid city name.")
    
    # Get user input for month (all, january, february, ... , june)
    months = ['all', 'january', 'february', 'march', 'april', 'may', 'june']
    while True:
        month = input("Please enter the month to filter by (all, January, February, March, April, May, June): ").strip().lower()
        if month in months:
            break
        print("Invalid input. Please enter a valid month name or 'all'.")
    
    # Get user input for day of week (all, monday, tuesday, ... sunday)
    days = ['all', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    while True:
        day = input("Please enter the day of week to filter by (all, Monday, Tuesday, ..., Sunday): ").strip().lower()
        if day in days:
            break
        print("Invalid input. Please enter a valid day of the week or 'all'.")
    
    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    # Load data file into a dataframe
    df = pd.read_csv(CITY_DATA[city])
    
    # Convert Start Time and End Time to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['End Time'] = pd.to_datetime(df['End Time'])
    
    # Extract month and day of week from Start Time
    df['month'] = df['Start Time'].dt.month_name().str.lower()
    df['day_of_week'] = df['Start Time'].dt.day_name().str.lower()
    
    # Filter by month if applicable
    if month != 'all':
        df = df[df['month'] == month]
    
    # Filter by day of week if applicable
    if day != 'all':
        df = df[df['day_of_week'] == day]
    
    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""
    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()
    
    # Most common month
    common_month = df['month'].mode()[0].title()
    print("Most common month:", common_month)
    
    # Most common day of week
    common_day = df['day_of_week'].mode()[0].title()
    print("Most common day of week:", common_day)
    
    # Most common start hour
    common_hour = df['Start Time'].dt.hour.mode()[0]
    print("Most common start hour:", common_hour)
    
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""
    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()
    
    # Most commonly used start station
    common_start_station = df['Start Station'].mode()[0]
    print("Most commonly used start station:", common_start_station)
    
    # Most commonly used end station
    common_end_station = df['End Station'].mode()[0]
    print("Most commonly used end station:", common_end_station)
    
    # Most frequent combination of start station and end station trip
    df['trip'] = df['Start Station'] + " to " + df['End Station']
    common_trip = df['trip'].mode()[0]
    print("Most frequent trip from start to end:", common_trip)
    
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""
    print('\nCalculating Trip Duration...\n')
    start_time = time.time()
    
    # Total travel time
    total_duration = df['Trip Duration'].sum()
    print("Total travel time (seconds):", total_duration)
    
    # Mean travel time
    mean_duration = df['Trip Duration'].mean()
    print("Average travel time (seconds): {:.2f}".format(mean_duration))
    
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df, city):
    """Displays statistics on bikeshare users."""
    print('\nCalculating User Stats...\n')
    start_time = time.time()
    
    # Counts of user types
    user_types = df['User Type'].value_counts()
    print("User Types:")
    print(user_types.to_string())
    
    # Counts of gender (only if available)
    if city in ['chicago', 'new york city']:
        if 'Gender' in df.columns:
            gender_counts = df['Gender'].value_counts()
            print("\nGender Counts:")
            print(gender_counts.to_string())
        else:
            print("\nGender data not available for this city.")
    else:
        print("\nGender data not available for Washington.")
    
    # Earliest, most recent, most common year of birth (only if available)
    if city in ['chicago', 'new york city']:
        if 'Birth Year' in df.columns:
            earliest_year = int(df['Birth Year'].min())
            most_recent_year = int(df['Birth Year'].max())
            common_year = int(df['Birth Year'].mode()[0])
            print("\nBirth Year Stats:")
            print("Earliest year of birth:", earliest_year)
            print("Most recent year of birth:", most_recent_year)
            print("Most common year of birth:", common_year)
        else:
            print("\nBirth Year data not available for this city.")
    else:
        print("\nBirth Year data not available for Washington.")
    
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def display_raw_data(df):
    """Prompt the user if they want to see raw data and display 5 rows at a time."""
    row_start = 0
    row_end = 5
    while True:
        show_data = input("Would you like to see 5 rows of raw data? Enter yes or no: ").strip().lower()
        if show_data != 'yes':
            break
        print(df.iloc[row_start:row_end])
        row_start += 5
        row_end += 5
        if row_start >= len(df):
            print("No more data to display.")
            break


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        
        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df, city)
        display_raw_data(df)
        
        restart = input('\nWould you like to restart? Enter yes or no.\n').strip().lower()
        if restart != 'yes':
            print("Goodbye!")
            break


if __name__ == "__main__":
    main()